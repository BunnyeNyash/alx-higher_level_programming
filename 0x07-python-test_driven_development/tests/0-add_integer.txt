This is a test file for an integer addition function ``add_integer(a, b=98)``.
==================================================

The 0-add_integer module takes two integers or floats as arguments and returns their sum

Usage
=====

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a =1 and b = 2)
    >>> add_integer(1, 2)
    3

Adding one positive and one negative integer (a = 100 and b = -2)
    >>> add_integer(100, -2)
    98

Adding two negative integers (a = -5 and b = -4)
    >>> add_integer(-5, -4)
    -9

Adding two integers with the second being the same as the default value of b (a = 2 and b = 98)
    >>> add_integer(2)
    100

Adding a positive float and a positive integer (a = 3.5 and b = 6)
    >>> add_integer(4.5, 6)
    10

Adding a float and an integer where the integer is equal to the default value of b (a = 2.5 and b = 98)
    >>> add_integer(2.5)
    100

Adding a positive float and a negative integer (a = 6.5 and b = -2)
	    >>> add_integer(6.5, -2)
	    4

Adding two negative floats (a = -6.5 and b = -3)
	    >>> add_integer(-6.5, -3)
	    -9

Adding an integer number and a string (a = 4 and b = "School")
    >>> add_integer(4, "School")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a letter and a number (a = 'x' and b = 4)
    >>> add_integer('x', 4)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters (a = 'x' and b = 'y')
    >>> add_integer('x', 'y')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((4, 4))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(115, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a only one string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two float numbers (a = 2.5 and b = 2.4)
    >>> add_integer(2.5, 2.4)
    4

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    V:alueError: cannot convert float NaN to integer
